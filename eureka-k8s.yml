# 定义一个ConfigMap用于存储eureka的注册中心地址
apiVersion: v1 # 版本号
kind: ConfigMap # 类型
metadata: # 定义元数据，名称与命名空间
  name: eureka-host
  namespace: {PROJECT_NAMESPACE}
data: # 定义这个ConfigMap要存储的数据
  registry_url: http://{PROJECT_NAME}-0.{PROJECT_NAME}:{PROJECT_PORT}/eureka/,http://{PROJECT_NAME}-1.{PROJECT_NAME}:{PROJECT_PORT}/eureka/,http://{PROJECT_NAME}-2.{PROJECT_NAME}:{PROJECT_PORT}/eureka/
--- # 定义service
apiVersion: v1
kind: Service
metadata: # service的元数据，包含名称、命名空间、标签
  name: {PROJECT_NAME}
  namespace: {PROJECT_NAMESPACE}
  labels:
    app: {PROJECT_NAME}
spec: # 定义属性
  selector: # 需要代理的pod的标签
    app: {PROJECT_NAME}
  ports: # service的端口
    - port: {PROJECT_PORT}
      name: {PROJECT_NAME}
  clusterIP: None # 设置为None，表示我们这是一个Headless Service
--- # 定义一个StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata: # 定义元数据，名称与命名空间
  name: {PROJECT_NAME}
  namespace: {PROJECT_NAMESPACE}
spec:
  replicas: 3 # 副本数
  serviceName: {PROJECT_NAME} # 服务名
  selector:
    matchLabels: # 匹配下方的template中定义的label
      app: {PROJECT_NAME}
  template: # 定义pod的模板
    metadata: # 模板的元数据
      labels:
        app: {PROJECT_NAME}
    spec: # 定义模板的属性
      containers:
        - name: {PROJECT_NAME}
          image: {PROJECT_IMAGE}
          ports:
            - containerPort: {PROJECT_PORT}
          readinessProbe: # 就绪检查
            httpGet:
              path: /actuator/health
              port: {PROJECT_PORT}
            failureThreshold: 3 # 探测失败的重试次数，如果超过3次了没成功就认定为pod是失败的状态
            initialDelaySeconds: 60 # pod启动延迟多久进行一次检查
            periodSeconds: 10 # 检测的时间间隔
            successThreshold: 1 # 只要一次成功就认为pod是正常的
            timeoutSeconds: 10 # 检测的超时时间，如果超时了就认为是失败的一个状态
          env: # 配置环境变量
            - name: EUREKA_HOST
              value: "{PROJECT_PORT}"
            - name: SERVER_NAME
              value: {PROJECT_NAME}
            - name: FETCH_EUREKA
              value: "true"
            - name: REGISTER_EUREKA
              value: "true"
            - name: EUREKA_URL
              valueFrom:
                configMapKeyRef:
                  name: eureka-host
                  key: registry_url
            - name: HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
---
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
#  name: {PROJECT_NAME}
#  namespace: {PROJECT_NAMESPACE}
#spec:
#  rules:
#    - host: eureka.snowbd.onesport.com.cn
#      http:
#        paths:
#          - backend:
#              serviceName: {PROJECT_NAME}
#              servicePort: {PROJECT_PORT}
